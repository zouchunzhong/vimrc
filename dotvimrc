" zouchunzhong-vimbundlemanager-Wed Dec 24 11:34:38 SGT 2014
" set nocompatible
" filetype off "required"
" "set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
" Plugin 'https://github.com/gmarik/Vundle.vim'

" Git plugin not hosted on GitHub
" Plugin 'git://github.com/wincent/Command-T'
" Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
" call vundle#end()            " required
" filetype plugin indent on    " required
" set autoindent
" set copyindent
" set hls is ic number nowrap
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" easier mapping for windows
"
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>
" This will execute the update command on leaving vim to a tmux pane. Default is Zero
let g:tmux_navigator_save_on_switch = 1
" zcz-tmux-related-stuffsTue Dec 23 15:40:23 SGT 2014
" zouchunzhong: for visual mark
" zouchunzhong for clipboard vim-windows
set clipboard=unnamed
" zouchunzhong for clipboard vim-windows
filetype plugin on
" zouchunzhong: 27-August-2010: least gui
set cmdheight=1 "make status line & cmd window share one line
set laststatus=0  "make status line & cmd window share one line
set fillchars=
set fillchars=stl:-,stlnc:-,vert:\|,fold:-,diff:-
set highlight+=S:NonText
set highlight+=c:NonText
set highlight+=s:Special
set updatetime=1000 "for taglist update
" zouchunzhong: 27-August-2010: least gui
" zouchunzhong: 02-December-2012: minibufexpl
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 
let g:netrw_http_xcmd="-dump >"
" zouchunzhong: Mon Jul  2 11:41:52 SGT 2012
" set the proper cscope executable file
"set cscopeprg=/usr/bin/cscope
" when adding cscope database, useful messages can be printed
"set cscopeverbose
" quick fix window is used in cscope search, so that :cn,:cf,:cpf,:cnf can be used
"set cscopequickfix=s-,c-,d-,i-,t-,e-
" if cscopetag is set, 0-cscope search first, 1-ctags search first
"set cscopetagorder=1
" zouchunzhong: Mon Jul  2 11:41:52 SGT 2012

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
" zouchunzhong switch between header/cpp files
" nnoremap <Leader>b :MiniBufExplorer<cr>
nnoremap <silent> <F12> :A<CR>
" zouchunzhong switch between header/cpp files
" zouchunzhong: file browser and netrw
" let g:winManagerWindowLayout='FileExplorer|TagList'
" let g:winManagerWindowLayout = 'FileExplorer,TagsExplorer|BufExplorer'
let g:winManagerWindowLayout = 'FileExplorer|TagsExplorer|BufExplorer'
nmap wm :WMToggle<cr>
" zouchunzhong: file browser and netrw
" hotkey to build the current ctags zouchunzhong-2012-07-23 "   set tags+=~/.vim/cpptags/cpptags set tags+=~/.vim/tags/cpptags
map <C-F10> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
imap <tab> <c-x><c-o>
" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
" hotkey to build the current ctags zouchunzhong-2012-07-23
" zouchunzhong 21-January-2010: for c/c++
" insert-mode: ^X-^K
set dictionary=~/.vim/c-support/wordlists/*.list
set dictionary^=~/usr/share/dict/words
set tabstop=4
set shiftwidth=4
set softtabstop=4
set statusline=%{$winwidth} "only set for default characters
set expandtab
set showmatch
set smartcase
set smarttab
set undolevels=1000
set visualbell
set title
set pastetoggle=<F2>
set t_Co=256
nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let Tlist_Process_File_Always=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Auto_Open=1
let Tlist_Compact_Format=1
let Tlist_Enable_Fold_Column=0
let Tlist_Display_Prototype=1
let Tlist_Display_Tag_Scope=1
" :retab                " re-format an existing file
" zouchunzhong 21-January-2010: for c/c++
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set hlsearch 		" added by zouchunzhong for quicker moving around using hlsearch
" Don't use Ex mode, use Q for formatting
map Q gq
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" zouchunzhong-insert-mode-2012-07-27
" inoremap <C-U> <C-G>u<C-U>
" inoremap kj <Esc>
" inoremap <Left> <NOP>
" inoremap <Right> <NOP>
" inoremap <Up> <NOP>
" inoremap <Down> <NOP>
" zouchunzhong-insert-mode-2012-07-27
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax enable
  syntax on
  " colorscheme koehler
  colorscheme koehler
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  set completeopt=longest,menu
  " filetype plugin on: taglist plugin setting

  " Put these in an autocmd group, so that we can delete them easily.
else

  set autoindent		" always set autoindenting on

endif " has("autocmd")
" zouchunzhong added for support of bash 
" 9/April/2010
let g:BASH_AuthorName   = 'ZouChunzhong'
let g:BASH_Email        = 'chunzhong.zou@teraoka.com.sg'
let g:BASH_Company      = 'Teraoka Weigh-System Pte Ltd'
" zouchunzhong added for support of NERD tree
" let loaded_nerd_tree=0

" zouchunzhong added for taglist for makefile
"-------------------------------------------------------------------
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for make
" taglist.vim : define the title texts for qmake
"-------------------------------------------------------------------
noremap <silent> <F11>  <Esc><Esc>:Tlist<CR>
inoremap <silent> <F11>  <Esc><Esc>:Tlist<CR>

let tlist_make_settings  = 'make;m:makros;t:targets;i:includes'
let tlist_qmake_settings = 'qmake;t:SystemVariables'


" zouchunzhong added for mouse paste or :set paste
set pastetoggle=<F5>
" zouchunzhong added for mouse paste or :set paste

if has("autocmd")
" ----------  qmake : set file type for *.pro  ----------
autocmd BufNewFile,BufRead *.pro  set filetype=qmake
endif " has("autocmd")
" zouchunzhong added for taglist for makefile
"zcz
set guioptions=m
set guifont=Mono\ 12
" exe "normal\<F11>"
silent !wmctrl -r :ACTIVE: -b add,fullscreen
colorscheme koehler
set columns=144
set lines=46
" zcz-2012-07-31: select/delete a match
vnoremap <silent> i/ :<c-u>call SelectMatch()<cr>
onoremap <silent> i/ :call SelectMatch()<cr>
function! SelectMatch()
    if search(@/, 'bcW')
        norm! v
        call search(@/, 'ceW')
    else
        norm! gv
    endif
endfunction
" zcz-2012-07-31: select/delete a match
" zcz-2012-08-02: use man/K inside vim
runtime ftplugin/man.vim
" zcz-2012-08-02: use man/K inside vim
" zcz-2013-02-20: qargs
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
let buffer_numbers = {}
for quickfix_item in getqflist()
let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
endfor
return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
" zcz-2013-02-20: qargs
" zcz-2013-02-20: visual-search
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch()
let temp=@s
norm! gv"sy
let @/='\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
let @s = temp
endfunction
" zcz-2013-02-20: visual-search
" zcz-Mon Dec 22 17:31:52 SGT 2014: manage 'runtimepath'
execute pathogen#infect()
execute pathogen#helptags()
set runtimepath^=~/.vim/bundle/ctrlpvim
" zcz-Mon Dec 22 17:31:52 SGT 2014: manage 'runtimepath'
" zcz-vimux-shortcuts-Wed Dec 24 10:43:02 SGT 2014
" prompt for a command to run
map rp :VimuxPromptCommand
" run last command executed by VimuxPromptCommand
map rl :VimuxRunLastCommand
" inspect runner pane
map ri :VimuxInspectRunner
" interruput any command running in the runner pane
map rs :VimuxInterruptRunner
" make better auto-completion background
set background=light
so ~/.vimrcplus
